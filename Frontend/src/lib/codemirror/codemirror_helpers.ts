// Helper functions for codemirror.

import { keymap } from "@codemirror/view";
import { Prec } from "@codemirror/state";
import { LRLanguage, LanguageSupport } from "@codemirror/language";
import { acceptCompletion } from "@codemirror/autocomplete";
import { parser } from "./parser/parser.js";
import { syntax_highlighter } from "$lib/codemirror/syntax_highlighter.js";
import { auto_completer } from "$lib/codemirror/visitors/auto_completer.js";
import { semantic_linter } from "$lib/codemirror/visitors/semantic_linter.js";
import { syntax_linter } from "$lib/codemirror/visitors/syntax_linter.js";

// Returns a list of extensions that are acceptable by codemirror.
// Extensions add features to codemirror.
export function get_extensions() {
  const key_map_extensions = Prec.highest(
    keymap.of([
      { key: "Tab", run: acceptCompletion }, // Make the tab key the tab completion keybind.
    ])
  );

  const language_support = new LanguageSupport(
    LRLanguage.define({
      parser: parser.configure({})
    })
  )

  return [
    key_map_extensions, // Add any non-default keybinds.
    language_support, // Parse the code and automatically create an AST.
    syntax_highlighter, // Assign tags to AST nodes and color them.
    auto_completer, // Apply auto completions based on the current word being typed.
    semantic_linter, // Apply semantic linter errors.
    syntax_linter, // Apply syntax linter warnings for malformed syntax.
  ]
}

// Print the AST generated by the parser.
export function printAST(code: any) {
  console.log(parser.parse(code).toString())
}