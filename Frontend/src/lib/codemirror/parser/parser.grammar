// This is the grammar responsible for lexing and parsing the code editor.
// To compile the grammar: "npm run compile-grammar"
// Compiling will generate the files parser.js and parser.terms.js, which act as the parser executable.

@external propSource taggedSyntax from "../syntax_highlighter"

@tokens {
  // Ungrouped symbols/operators
  DOT { "." }
  QUESTION { "?" }
  COLON { ":" }
  COMMA { "," }
  SEMICOLON { ";" }
  ARROW { "->" }
  FAT_ARROW { "=>" }
  LPAREN { "(" }
  RPAREN { ")" }
  LBRACE { "{" }
  RBRACE { "}" }
  LBRACKET { "[" }
  RBRACKET { "]" }
  COLON_COLON { "::" }
  
  // Assignment operators: ASSIGN_OP
  EQUAL { "=" }
  PLUS_EQUAL { "+=" }
  MINUS_EQUAL { "-=" }
  STAR_EQUAL { "*=" }
  SLASH_EQUAL { "/=" }
  PERCENT_EQUAL { "%=" }

  // Equality operators: EQUALITY_OP
  EQUAL_EQUAL { "==" }
  BANG_EQUAL { "!=" }
  
  // Comparison operators: COMPARISON_OP
  GREATER { ">" }
  GREATER_EQUAL { ">=" }
  LESS { "<" }
  LESS_EQUAL { "<=" }

  // Factor operators: FACTOR_OP
  STAR { "*" }
  SLASH { "/" }
  PERCENT { "%" }

  // Term operators: TERM_OP
  MINUS { "-" }
  PLUS { "+" }

  @precedence { FLOAT_LITERAL, INT_LITERAL }
  IDENTIFIER { $[a-zA-Z_]$[a-zA-Z0-9_]* }
  FLOAT_LITERAL { $[0-9]+"."$[0-9]+($[Ee]$[-\+]?$[0-9]+)? }
  INT_LITERAL { $[0-9]+ }

  singlelineCommentContent { ![\n]+ }
  whitespace { $[ \t\n\r]+ }
}

@skip { SINGLELINE_COMMENT | MULTILINE_COMMENT | whitespace }

// Comments/strings use JavaScript/C++ lezer implementations.
@skip {} {
  SINGLELINE_COMMENT { "//" (singlelineCommentContent)* "\n" }
  MULTILINE_COMMENT { "/*" (multilineCommentContent | multilineCommentNewline)* multilineCommentEnd }
  STR_LITERAL { "\"" (stringLiteralContent | stringLiteralNewline)* stringLiteralEnd }
}

@local tokens {
  multilineCommentEnd { "*/" }
  multilineCommentNewline { "\n" }
  @else multilineCommentContent
}

@local tokens {
  stringLiteralEnd { "\"" }
  stringLiteralNewline { "\n" }
  @else stringLiteralContent
}

// All keywords are considered identifiers.
// To avoid ambiguity in their distinguishment, we use the kw<> function.
kw<term> { @specialize[@name={term}]<IDENTIFIER, term> }



@precedence {
  scope_resolution_expr @left
  match_expr @left
  array_initialization @left
  primary @left
  struct_initialization @left
  direct_member_access @left
  subscript @left
  call @left
  cast @left
  unary @right
  factor @left
  term @left
  comparison @left
  equality @left
  and @left
  xor @left
  or @left
  ternary @right
  assign @right
}

@top Program {
  maybe_top_level_stmts
}

maybe_top_level_stmts {
  top_level_stmts?
}

top_level_stmts {
  Top_level_stmt |
  top_level_stmts Top_level_stmt 
}

Top_level_stmt {
  Func |
  Struct_decl |
  Stmt
}

Stmt {
  Decl_stmt |
  If_stmt |
  Const_stmt |
  Print_stmt |
  Block |
  While_stmt |
  For_stmt |
  Return_stmt |
  Break_stmt |
  Namespace_stmt |
  Continue_stmt |
  Expr_stmt |
  Type_stmt |
  Import_stmt
}

maybe_namespace_stmts {
  namespace_declaration_stmts?
}

namespace_declaration_stmts {
  namespace_declaration_stmt |
  namespace_declaration_stmts namespace_declaration_stmt 
}

namespace_declaration_stmt {
  Namespace_stmt |
  Decl_stmt |
  Const_stmt |
  Struct_decl |
  Type_stmt |
  Func
}

Namespace_stmt {
  kw<"namespace"> IDENTIFIER LBRACE maybe_namespace_stmts RBRACE
}

Scope_resolution {
  IDENTIFIER COLON_COLON !match_expr Expr
}

Struct_decl {
  kw<"struct"> IDENTIFIER LBRACE maybe_member_decls RBRACE SEMICOLON
}

maybe_member_decls {
  member_decls?
}

member_decls {
  member_decl |
  member_decls member_decl
}

member_decl {
  Func |
  Prop_decl
}

Prop_decl {
   IDENTIFIER COLON Type_identifier SEMICOLON
}

Decl_stmt {
  kw<"var"> IDENTIFIER EQUAL Expr SEMICOLON |
  kw<"var"> IDENTIFIER COLON Type_identifier EQUAL Expr SEMICOLON
}

Const_stmt {
  kw<"const"> IDENTIFIER EQUAL Expr SEMICOLON |
  kw<"const"> IDENTIFIER COLON Type_identifier EQUAL Expr SEMICOLON
}

If_stmt {
  kw<"if"> Expr Block |
  kw<"if"> Expr Block kw<"else"> Block |
  kw<"if"> Expr Block kw<"else"> If_stmt
}

While_stmt {
  kw<"while"> Expr Block
}

For_stmt {
  kw<"for"> maybe_stmt maybe_expr SEMICOLON maybe_expr Block |
  kw<"for"> IDENTIFIER kw<"in"> Expr Block
}

Print_stmt {
  kw<"print"> arg_list SEMICOLON
}

Block {
  LBRACE maybe_stmts RBRACE
}

maybe_stmts {
  stmts?
}

stmts {
  Stmt |
  stmts Stmt
}

Func {
  kw<"fn"> IDENTIFIER LPAREN maybe_param_list RPAREN return_type Block
}

maybe_stmt {
  SEMICOLON |
  Stmt
}

maybe_expr {
  Expr?
}

Return_stmt {
  kw<"return"> SEMICOLON |
  kw<"return"> Expr SEMICOLON
}

Break_stmt {
   kw<"break"> SEMICOLON
}

Continue_stmt {
   kw<"continue"> SEMICOLON
}

Expr_stmt {
  Expr SEMICOLON
}

Type_stmt {
  kw<"type"> IDENTIFIER EQUAL Type_identifier SEMICOLON
}

Import_stmt {
  kw<"import"> import_path_list |
  kw<"import"> import_path_list kw<"from"> import_path
}

import_path_list {
  import_path |
  import_path_list COMMA import_path
}

import_path {
  IDENTIFIER |
  import_path COLON_COLON IDENTIFIER
}

maybe_arg_list {
  arg_list?
}

arg_list {
  Expr |
  arg_list COMMA Expr
}

maybe_param_list   {
  param_list?
}

param_list {
  param |
  param_list COMMA param
}

param {
  IDENTIFIER COLON Type_identifier
}

return_type {
  (ARROW Type_identifier)?
}

Expr {
  Assign_expr |
  Ternary_expr |
  Binary_expr | // Contains equality_expr, comparison_expr, term_expr, factor_expr, and_expr, xor_expr, or_expr
  Unary_expr |
  Type_cast |
  Call_expr |
  Method_call |
  Subscript_expr |
  Index_assign |
  Direct_member_access |
  Struct_initialization |
  Array_initialization |
  Match |
  Scope_resolution |
  Primary |
  Grouping
}

Assign_expr {
  Primary !assign ASSIGN_OP Expr |
  Direct_member_access !assign ASSIGN_OP Expr
}

Index_assign {
  Subscript_expr !assign ASSIGN_OP Expr
}

Type_cast {
  Expr kw<"as"> !cast Type_identifier
}

Ternary_expr {
  Expr QUESTION Expr COLON !ternary Expr
}

Binary_expr {
  equality_expr |
  comparison_expr |
  term_expr |
  factor_expr |
  and_expr |
  xor_expr |
  or_expr
}

equality_expr {
  Expr EQUALITY_OP !equality Expr
}

comparison_expr {
  Expr COMPARISON_OP !comparison Expr
}

term_expr {
  Expr TERM_OP !term Expr
}

factor_expr {
  Expr FACTOR_OP !factor Expr
}

and_expr {
  Expr kw<"and"> !and Expr
}

xor_expr {
  Expr kw<"xor"> !xor Expr
}

or_expr {
  Expr kw<"or"> !or Expr
}

Unary_expr {
  PREFIX_UNARY_OP !unary Expr
}

Call_expr {
  IDENTIFIER LPAREN maybe_arg_list !call RPAREN
}

Struct_initialization {
  IDENTIFIER !struct_initialization LBRACE maybe_struct_initialization_list RBRACE
}

maybe_struct_initialization_list {
  struct_initialization_list? |
  struct_initialization_list COMMA
}

struct_initialization_list {
  IDENTIFIER EQUAL Expr |
  struct_initialization_list COMMA IDENTIFIER EQUAL Expr
}

Array_initialization {
  LBRACKET maybe_arg_list !array_initialization RBRACKET
}

Subscript_expr {
  Expr LBRACKET Expr !subscript RBRACKET
}

Direct_member_access {
  Expr DOT !subscript IDENTIFIER
}

Method_call {
  Expr DOT !call Call_expr
}

Match {
  kw<"match"> Expr LBRACE maybe_match_arms match_else_arm !match_expr RBRACE
}

maybe_match_arms {
  match_arms? |
  match_arms COMMA
}

match_arms {
  Expr FAT_ARROW Expr |
  match_arms COMMA Expr FAT_ARROW Expr
}

match_else_arm {
  kw<"else"> FAT_ARROW Expr
}

Primary {
  IDENTIFIER !primary |
  kw<"self"> |
  INT_LITERAL |
  FLOAT_LITERAL |
  kw<"true"> |
  kw<"false"> |
  STR_LITERAL
}

Grouping {
   LPAREN Expr RPAREN 
}

ASSIGN_OP {
  EQUAL |
  PLUS_EQUAL |
  MINUS_EQUAL |
  STAR_EQUAL |
  SLASH_EQUAL |
  PERCENT_EQUAL
}

EQUALITY_OP {
  EQUAL_EQUAL |
  BANG_EQUAL
}

COMPARISON_OP {
  GREATER |
  GREATER_EQUAL |
  LESS |
  LESS_EQUAL
}

FACTOR_OP {
  STAR |
  SLASH |
  PERCENT
}

TERM_OP {
  PLUS |
  MINUS
}

PREFIX_UNARY_OP {
  MINUS |
  kw<"not">
}

Type_identifier {
  IDENTIFIER |
  kw<"int"> |
  kw<"float"> |
  kw<"bool"> |
  kw<"str"> |
  kw<"void"> |
  Type_identifier LBRACKET RBRACKET
}